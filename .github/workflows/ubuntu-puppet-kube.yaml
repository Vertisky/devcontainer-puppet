# generate a github action to build ubuntu docker image
# and push to etma/devcontainer
name: Ubuntu-Puppet-Kube
on:
  schedule:
    - cron: '1 0 * * *'
  push:
    paths:
      - .github/workflows/ubuntu-puppet-kube.yaml
      - containers/ubuntu-kube.Dockerfile
      - .dockerignore
      - containers/shell/**
  pull_request:
    paths:
      - .github/workflows/ubuntu-puppet-kube.yaml
      - containers/ubuntu-kube.Dockerfile
      - .dockerignore
      - containers/shell/**

jobs:
  verify:
    runs-on: ubuntu-latest
    # needs: ['gather']
    steps:
      - uses: actions/checkout@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to dockerhub to avoid rate limits
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Ubuntu
        run: docker build --build-arg PUPPET_VERSION=latest -t etma/devcontainer-puppet:ubuntu-kube -f ./containers/ubuntu-kube.Dockerfile .

  latest:
    runs-on: ubuntu-latest
    needs: ['verify']
    if: github.event_name == 'push'
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to dockerhub to avoid rate limits
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v2

      - run: docker context create builders

      - uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: set variables
        id: vars
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          TAG=${GITHUB_REF#refs/tags/}
          echo commit=$(git rev-parse --short HEAD) >> $GITHUB_OUTPUT
          echo created=$(date -u +%Y-%m-%dT%H:%M:%SZ) >> $GITHUB_OUTPUT
          if [ "$TAG" != "$GITHUB_REF" ]; then
            echo version=ubuntu-kube-latest-$TAG >> $GITHUB_OUTPUT
            echo ubuntu_version=ubuntu-kube-$TAG >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          elif [ "$BRANCH" = "main" ]; then
            echo version=ubuntu-kube-latest >> $GITHUB_OUTPUT
            echo ubuntu_version=ubuntu-kube >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          else
            echo version=ubuntu-latest-kube-$BRANCH >> $GITHUB_OUTPUT
            echo ubuntu_version=ubuntu-kube-$BRANCH >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=false >> $GITHUB_OUTPUT
          fi

      - name: Build and push final image
        uses: docker/build-push-action@v3
        if: ${{ steps.vars.outputs.main }}
        with:
          context: .
          file: ./containers/ubuntu.Dockerfile
          platforms: ${{ steps.vars.outputs.platforms }}
          push: true
          build-args: |
            CREATED=${{ steps.vars.outputs.created }}
            REVISION=${{ steps.vars.outputs.commit }}
            VERSION=${{ steps.vars.outputs.version }}
            PUPPET_VERSION=latest
          tags: |
            etma/devcontainer-puppet:${{ steps.vars.outputs.version }}
            etma/devcontainer-puppet:${{ steps.vars.outputs.ubuntu_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

  publish:
    runs-on: ubuntu-latest
    needs: ['verify']
    if: github.event_name == 'push'
    permissions:
      packages: write
    strategy:
      max-parallel: 10
      matrix:
        puppet-version: ['3.0.0.0','latest']
    steps:
      - uses: actions/checkout@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to dockerhub to avoid rate limits
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v2

      - run: docker context create builders

      - uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: set variables
        id: vars
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          TAG=${GITHUB_REF#refs/tags/}
          echo commit=$(git rev-parse --short HEAD) >> $GITHUB_OUTPUT
          echo created=$(date -u +%Y-%m-%dT%H:%M:%SZ) >> $GITHUB_OUTPUT
          if [ "$TAG" != "$GITHUB_REF" ]; then
            echo version=${{ matrix.puppet-version }}-kube-$TAG >> $GITHUB_OUTPUT
            echo ubuntu_version=${{ matrix.puppet-version }}-ubuntu-kube-$TAG >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          elif [ "$BRANCH" = "main" ]; then
            echo version=${{ matrix.puppet-version }}-ubuntu-kube-latest >> $GITHUB_OUTPUT
            echo ubuntu_version=${{ matrix.puppet-version }}-ubuntu-kube >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          else
            echo version=${{ matrix.puppet-version }}-kube-$BRANCH >> $GITHUB_OUTPUT
            echo ubuntu_version=${{ matrix.puppet-version }}-ubuntu-kube-$BRANCH >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=false >> $GITHUB_OUTPUT
          fi

      - name: Build and push final image
        uses: docker/build-push-action@v3
        if: ${{ steps.vars.outputs.main }}
        with:
          context: .
          file: ./containers/ubuntu-kube.Dockerfile
          platforms: ${{ steps.vars.outputs.platforms }}
          push: true
          build-args: |
            CREATED=${{ steps.vars.outputs.created }}
            REVISION=${{ steps.vars.outputs.commit }}
            VERSION=${{ steps.vars.outputs.version }}
            PUPPET_VERSION=${{ matrix.puppet-version }}
          tags: |
            etma/devcontainer-puppet:${{ steps.vars.outputs.version }}
            etma/devcontainer-puppet:${{ steps.vars.outputs.ubuntu_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
